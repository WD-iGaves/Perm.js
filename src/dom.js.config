/**
 * Dom对象
 * @class
 * @classdesc Dom对象
 * @param {HTMLElement} element - html对象
 * @example
 * var d = new Dom(document.getElementById("idname"));
 * d.method();
 */
//@require class.js

var DomProperty = {
		/**
		 * @desc 
		 * @constructor
		 * @param {HTMLElement} element - html对象
		 */
		initialize:function(element){
			/**
			 * @property {HTMLElement} _d -原始的HTMLElement暂存
			 */
			this._d = element;
			/**
			 * @property {boolean} _multi -是否是多个element集合
			 */
			this._multi=false;
			
			this._historyStyleCache={};
			if('length' in this._d){
				this._multi=true;
			}
		},
		/**
		 * 显示隐藏
		 */
		show:function(){
			if(this._multi){
				for(var i=0;i<this._d.length;i++){
					if(this._historyStyleCache['display'] && this._historyStyleCache['display'] !=='none'){
						this._d[i].style.display == this._historyStyleCache['display'][i];
					}else{
						this._d[i].style.display ='block';
					}
				}
			}else{
				if(this._historyStyleCache['display'] && this._historyStyleCache['display'] !=='none'){
					this._d.style.display == this._historyStyleCache['display'];
				}else{
					this._d.style.display = 'block';
				}
			}
		},
		hide:function(){
			if(this._multi){
				for(var i=0;i<this._d.length;i++){
					if(!this._historyStyleCache['display']){
						this._historyStyleCache['display'] = [];
					}
					var d = new Dom(this._d[i]);
					var display = d.css('display');
					
					delete d;
					if(display == 'none'){
						continue;
					}
					
					this._historyStyleCache['display'][i] = display;
					this._d[i].style.display="none";
				}
			}else{
				if(this.css('display') !== 'none'){
					this._historyStyleCache['display'] = this.css("display");
					this._d.style.display='none';
				}
			}
			
			return this;
		},
		visible:function(){
			return this.css("display")!=='none';
		},
		/**
		 * @param {Dom/HTMLElement/Selector} element 追加入的父元素
		 * @returns {Boolean}
		 */
		appendTo:function(element){
			var target = null;
			if(element instanceof Dom){
				target = element;
			}else if(typeof element == 'object'){
				target = new Dom(element);
			}else if(typeof element == 'string'){
				target = $$(element);
			}else{
				return false;
			}
			if(target._multi){
				target._d[0].appendChild(this._d);
			}else{
				target._d.appendChild(this._d);
			}
			
			return this;
		},
		/**
		 * 插入子元素
		 * @param {Dom} dom -子节点
		 */
		append:function(dom){
			if(!this._multi){
				this._d.appendChild(dom._d);
			}else{
				this._d[0].appendChild(dom._d);
			}
			return this;
		},
		/**
		 * 去得父节点
		 */
		parent:function(){
			var d = this._d;
			if(this._multi){
				d=this._d[0];
			}
			return new Dom(d.parentNode);
		},
		/**
		 * 设置样式,取得样式
		 * @example
		 *
		 * dom.css("left");//取得
		 * dom.css("left",123);//设置
		 * dom.css({left:11,right:11});//设置
		 */
		css:function(){
			var key=null,value='',i=0;
			if(typeof arguments[0] == 'string'){
				if(typeof arguments[1]!='undefined'){
					//取得css
					key  = arguments[0];
					value=arguments[1];
					if(this._multi){
						for(i=0;i<this._d.length;i++){
							this._d[i].style[key] = value;
						}
					}else{
						this._d.style[key] = value;
					}

				}else{
					return this._getCss(this._d,arguments[0]);
				}
			}else if(typeof arguments[0] == 'object'){
				for(key in arguments[0]){
					value=arguments[0][key];
					if(typeof value !='string' && typeof value !='number') continue;
					//fuzhi
					if(this._multi){
						for(i=0;i<this._d.length;i++){
							this._d[i].style[key] = value;
						}
					}else{
						this._d.style[key] = value;
					}
				}
			}
			return this;
		},
		/**
		 * 获取dom.的节点css属性
		 * @param {HTMLElements} dom
		 * @param {String} key
		 * @returns
		 */
		_getCss:function(dom,key){
			if('length' in dom){
				dom = dom[0];
			}
			if(!!window.getComputedStyle){
				var computed = getComputedStyle(dom,null);
				return computed[key];
			}else if(!!document.documentElement.currentStyle){
				return dom.currentStyle[key];
			}
		},
		/**
		 * 设置style属性
		 * @param style
		 */
		setStyle:function(style){
			if(this._multi){
				for(var i=0;i<this._d.length;i++){
					this._d[i].setAttribute("style",style);
				}
			}else{
				this._d.setAttribute("style",style);
			}
		},
		/**
		 * 取得宽度
		 * @returns {number}
		 */
		width:function(){
			if(this._multi){
				return this._d[0].offsetWidth;
			}
			return this._d.offsetWidth;
		},
		/**
		 * 取得高度
		 * @returns {number}
		 */
		height:function(){
			if(this._multi){
				return this._d[0].offsetHeight;
			}
			return this._d.offsetHeight;
		},
		/**
		 * 添加样式
		 * @param {string}cname
		 * @returns {Boolean}
		 */
		hasClass:function(cname){
			if(this._multi) return false;
			if (!this._d|| !this._d.className) return false;
			return this._d.className != this._d.className.replace(new RegExp('\\b*' + cname ),'');
		},
		addClass:function(cname){
			if(this._multi){
				for(var i=0;i<this._d.length;i++){
					var d = new Dom(this._d[i]);
					if(!d.hasClass(cname)){
						d.addClass(cname);
					}
					d=null;
				}
			}else{
				if(!this.hasClass(cname)){
					if(!this._d) return this;
					if(this._d.className){
						cname=" "+cname;
					}else{
						this._d.className +=cname;
					}
				}
			}
			return this;
		},
		removeClass:function(cname){
			if(this._multi){
				for(var i=0;i<this._d.length;i++){
					var d = new Dom(this._d[i]);
					d.removeClass(cname);
					d=null;
				}
			}else{
				this._d.className=this._d.className.replace(new RegExp('\\b*' + cname),'');
			}
			return this;
		},
		/**
		 * 选择
		 * @param selector
		 * @returns {Dom}
		 */
		findOne:function(selector){
			//return new Dom(this._d.querySelector(selector));
		},
		find:function(selector){
			//return new Dom(this._d.querySelectorAll(selector));
		},
		/**
		 * 绑定事件
		 */
		bind:function(name,handler){
			if(this._multi){
				for(var i=0;i<this._d.length;i++){
					this._d[i].addEventListener(name,handler);
				}
			}else{
				this._d.addEventListener(name,handler);
			}
			return this;
		},
		unbind:function(name,handler){
			if(this._multi){
				for(var i=0;i<this._d.length;i++){
					this._d[i].removeEventListener(name,handler);
				}
			}else{
				this._d.removeEventListener(name,handler);
			}
			
			return this;
		},
		/**
		 * 设置/去得dom attribute
		 */
		attr:function(){
			var proper = arguments[0];
			if(arguments.length>1){
				var value=arguments[1];
				this._d.setAttribute(proper,value);
				return this;
			}else{
				return this._d.getAttribute(proper);
			}
		},
		/**
		 * 设置，去得dom html
		 * @returns
		 */
		html:function(){
			if(arguments[0]){
				var inner = arguments[0];
				if(!this._multi){
					this._d.innerHTML = inner;
				}else{
					for(var i=0;i<this._d.length;i++){
						this._d[i].innerHTML = inner;
					}
				}
				
				return this;
			}
			
			var d = this._d;
			if(this._multi){
				d = this._d[0];
			}
			return d.innerHTML;
		},
		clone:function(){
			var d= this._d;
			if(this._multi){
				d = this._d[0];
			}
			return new Dom(d.cloneNode(true));
		}
	};
var Dom = Class.create(DomProperty);

/**
*扩展Dom类
 */
Class.extend(Dom,{
	/**
	 * 生成节点
	 * @class Dom
	 * @property
	 * @param {string} nodeName -节点名称
	 */
	create:function(nodeName){
		return new Dom(document.createElement(nodeName));
	}
});